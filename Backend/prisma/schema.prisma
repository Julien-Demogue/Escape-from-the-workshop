// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int    @id @default(autoincrement())
  username    String
  hashedEmail String
  color       String

  // relations
  adminParties Party[] // parties where this user is admin
  groupUsers   GroupUser[] // membership links
  messagesSent Message[] // messages sent by this user

  @@map("users")
}

model Party {
  id          Int     @id @default(autoincrement())
  code        String
  adminUserId Int
  endTime     DateTime? // timestamp (MySQL TIMESTAMP / DATETIME), stored as DateTime in Prisma

  // relations
  adminUser User    @relation(fields: [adminUserId], references: [id])
  groups    Group[]

  @@map("parties")
}

model Message {
  id       Int      @id @default(autoincrement())
  groupId  Int
  senderId Int
  sendDate DateTime @default(now())
  content  String

  // relations
  group  Group @relation(fields: [groupId], references: [id])
  sender User  @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Info {
  id          Int    @id @default(autoincrement())
  challengeId Int
  title       String
  description String

  // relations
  illustrations Illustration[]
  challenge     Challenge      @relation(fields: [challengeId], references: [id])

  @@map("infos")
}

model Illustration {
  id     Int    @id @default(autoincrement())
  infoId Int
  url    String

  // relations
  info Info @relation(fields: [infoId], references: [id])

  @@map("illustrations")
}

model GroupUser {
  id      Int @id @default(autoincrement())
  groupId Int
  userId  Int

  // relations
  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("groupe_user")
}

model Group {
  id      Int    @id @default(autoincrement())
  partyId Int
  name    String
  code    String
  score   Int    @default(0)

  // relations
  party               Party               @relation(fields: [partyId], references: [id])
  groupUsers          GroupUser[]
  messages            Message[]
  challengeProgresses ChallengeProgress[]

  @@map("groupes")
}

model Challenge {
  id     Int    @id @default(autoincrement())
  flag   String
  reward String
  hint   String
  points Int

  // relations
  progresses ChallengeProgress[]
  Info       Info[]

  @@map("challenges")
}

model ChallengeProgress {
  id          Int     @id @default(autoincrement())
  groupId     Int
  challengeId Int
  isCompleted Boolean @default(false)

  // relations
  group     Group     @relation(fields: [groupId], references: [id])
  challenge Challenge @relation(fields: [challengeId], references: [id])

  @@map("challenge_progress")
}
